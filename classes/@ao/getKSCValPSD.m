% getKSCValPSD provides critical value for KStest on the PSD
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% DESCRIPTION: The method provides critical value for KStest on the PSD.
% Critical values are read from look-up tables that are calculated with
% 5000 iteration Monte Carlo simulations.
% 
% Note that the method has some imortant limitations:
% i)   It works only for BH92 window.
% ii)  Number of samples is limited in the range 50000 - 100.
% iii) Number of averages is limited in the range 0 - 32.
% iv)  Possible confidence values required are 0.5, 0.683, 0.955, 0.99,
%      0.997, 0.999.
% v)   It assumes to deal with normalized or white noise spectra. Tthe
%      spectrum can be normalized if divied by a smooth model
%      representative of its expectation value. I.e. If Sn is the data
%      spectrum and S a smooth model, then normS = Sn./S.
%      In the case of data vs data test the two spectra must be normalized
%      with the same model. Such model has to be representative of the
%      expectation value for at least one of the two spectra.
%
% CALL:         For testing data vs model:
%               cVal = getKSCValPSD(a1, pl)
% 
%               For testing data vs data
%               cVal = getKSCValPSD(a1, a2, pl)
% 
% INPUT:        ai: are frequency series AO containing the PSDs that will
%               be tested with the KStest
% 
% OUTPUT:       cVal: is the critical vale that should be used in the
%               KStest.
%
%
% <a href="matlab:utils.helper.displayMethodInfo('ao', 'getKSCValPSD')">Parameters Description</a>
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function varargout = getKSCValPSD(varargin)

  % Check if this is a call for parameters
  if utils.helper.isinfocall(varargin{:})
    varargout{1} = getInfo(varargin{3});
    return
  end

  import utils.const.*
  utils.helper.msg(msg.PROC3, 'running %s/%s', mfilename('class'), mfilename);

  % Collect input variable names
  in_names = cell(size(varargin));
  try for ii = 1:nargin,in_names{ii} = inputname(ii); end; end

  % Collect all AOs and plists
  [as, ao_invars] = utils.helper.collect_objects(varargin(:), 'ao', in_names);
  pl              = utils.helper.collect_objects(varargin(:), 'plist', in_names);
  
  % check inputs
  if nargout == 0
    error('getKSCValPSD cannot be used as a modifier. Please provide an output variable.');
  end
  
  if numel(as)>2
    error('getKSCValPSD does not accept more than two inputs.');
  end
  
  % Collect input histories
  inhists = [as.hist];
  
  pl = applyDefaults(getDefaultPlist(), pl);
  
  % get parameters
  Navs = find_core(pl, 'Navs');
  if isa(Navs, 'ao')
    Navs = Navs.y;
  end
  Confidence = find_core(pl, 'Confidence');
  if isa(Confidence, 'ao')
    Confidence = Confidence.y;
  end
  
  % check the inputs to decide the test type (data vs model or data vs data)
  if numel(as) == 1
    type = 'model';
  else
    type = 'data';
  end
  
  
  switch type
    case 'model'
      Nsamp = numel(as(1).y);
      
      % get cVal matrix
      [cValMat,Yv,Xv] = getCValModProb(Confidence);
      
    case 'data'
      
      Nsamp = numel(as(1).y);
      Nsamp2 = numel(as(2).y);
      if Nsamp~=Nsamp2
        error('Data must have the same length!');
      end
      
      % get cVal matrix
      [cValMat,Yv,Xv] = getCValDatProb(Confidence);
      
  end

  % interpolate
  cValint = interpCVal(Xv,Yv,cValMat,Navs,Nsamp);
  
  bs = ao(cValint);
  bs.setName('KStest Critical Value');
  bs.addHistory(getInfo('None'), pl, ao_invars, inhists);
  
  % Set output
  varargout = utils.helper.setoutputs(nargout, bs);

end

%--------------------------------------------------------------------------
% Get Info Object
%--------------------------------------------------------------------------
function ii = getInfo(varargin)
  if nargin == 1 && strcmpi(varargin{1}, 'None')
    sets = {};
    pl   = [];
  else
    sets = {'Default'};
    pl   = getDefaultPlist;
  end
  % Build info object
  ii = minfo(mfilename, mfilename('class'), 'ltpda', utils.const.categories.sigproc, '', sets, pl);
  ii.setArgsmin(1);
  ii.setOutmin(1);
%   ii.setOutmax(1);
  ii.setModifier(false);
end

%--------------------------------------------------------------------------
% Get Default Plist
%--------------------------------------------------------------------------
function plout = getDefaultPlist()
  persistent pl;  
  if exist('pl', 'var')==0 || isempty(pl)
    pl = buildplist();
  end
  plout = pl;  
end

function pl = buildplist()
  
  pl = plist();
  
  p = param({'Navs', ['Number of averages used in the PSD calculation.\n'...
    'Allowed values are between 0 and 32']}, paramValue.DOUBLE_VALUE(0));
  pl.append(p);
  
  p = param({'Confidence', ['Required confidence level.\n'...
    'Allowed values are 0.5, 0.683, 0.955, 0.99, 0.997, 0.999.']}, ...
    {3, {0.50, 0.6830, 0.9550, 0.990, 0.9970, 0.9990}, paramValue.OPTIONAL});
  pl.append(p);
  
  
end

%--------------------------------------------------------------------------
% Local Functions
%--------------------------------------------------------------------------

function cValint = interpCVal(Xv,Yv,cValMat,Xi,Yi)
% Xv is the vector of navs
% Yv is the vactor of Nsamp
% cValMat is the matrix with the critical values
% Xi is the navs to interpolate
% Yi is the Nsamples to interpolate

[X,Y] = meshgrid(Xv,Yv);

cValint = interp2(X,Y,cValMat,Xi,Yi,'linear');

if isnan(cValint)
  error(['Number of samples or number of averages is out of admitted range.\n' ...
    'Please provide the number of samples between 50000 and 100 and '...
    'the number of averages between 0 and 32.']);
end

end


function [cValM,Nsamp,navs] = getCValModProb(opt)

% critical values for the combination experiment vs experiment
% rows correspond to the number of samples 
Nsamp = [...
  50000 40000 30000 20000 10000, 9000, 8000,...
  7000, 6000, 5000, 4000, 3000, 2000, 1000, ...
  900, 800, 700, 600, 500, 400, 300, 200, 100];
%
% coulms correspond to the number of averages
navs = [0 4 8 16 32];
%
% there is a matrix for each probability in the range
% probs = [0.5, 0.683, 0.955, 0.99, 0.997, 0.999];

switch opt
  case 0.5
    cValM = [...
      0.004536, 0.01259, 0.01429, 0.01484, 0.01501; ...
      0.005014, 0.01283, 0.01446, 0.01501, 0.01524; ...
      0.005748, 0.01323, 0.01476, 0.01552, 0.01576; ...
      0.007046, 0.01388, 0.01556, 0.01615, 0.01657; ...
      0.01011, 0.01576, 0.01717, 0.0181, 0.01837; ...
      0.01059, 0.01614, 0.01757, 0.01845, 0.01882; ...
      0.01116, 0.01654, 0.01812, 0.01887, 0.01925; ...
      0.0119, 0.01715, 0.01859, 0.01948, 0.01982; ...
      0.01282, 0.01788, 0.01925, 0.02023, 0.0205; ...
      0.01415, 0.01885, 0.02027, 0.02108, 0.02144; ...
      0.01576, 0.02012, 0.0217, 0.02226, 0.02274; ...
      0.01826, 0.02216, 0.0236, 0.0243, 0.02475; ...
      0.02188, 0.02579, 0.02689, 0.02767, 0.02765; ...
      0.03111, 0.03438, 0.03513, 0.03571, 0.03604; ...
      0.03285, 0.03584, 0.03673, 0.03729, 0.03732; ...
      0.0349, 0.03785, 0.03889, 0.03926, 0.03934; ...
      0.03732, 0.04046, 0.0409, 0.04154, 0.04176; ...
      0.03982, 0.0432, 0.04412, 0.0438, 0.04456; ...
      0.04352, 0.0466, 0.04772, 0.04756, 0.04807; ...
      0.04799, 0.0518, 0.05219, 0.05233, 0.05257; ...
      0.05566, 0.05973, 0.05933, 0.05955, 0.06008; ...
      0.0679, 0.07132, 0.07219, 0.07196, 0.07226; ...
      0.09355, 0.09836, 0.09938, 0.09799, 0.0988 ];
    
    
  case 0.683
    cValM = [...
      0.005391, 0.01405, 0.0156, 0.01602, 0.01605; ...
      0.006002, 0.01442, 0.01595, 0.01638, 0.01641; ...
      0.00691, 0.01501, 0.01642, 0.01693, 0.01705; ...
      0.008448, 0.01597, 0.01742, 0.01795, 0.01812; ...
      0.01208, 0.01843, 0.0197, 0.02041, 0.02053; ...
      0.01262, 0.01887, 0.02005, 0.02078, 0.02099; ...
      0.01335, 0.01948, 0.02068, 0.02126, 0.02164; ...
      0.01419, 0.02014, 0.02136, 0.02205, 0.02216; ...
      0.01536, 0.02109, 0.02217, 0.02299, 0.02311; ...
      0.01696, 0.02215, 0.02349, 0.0242, 0.0244; ...
      0.01893, 0.02394, 0.02521, 0.02577,  0.026; ...
      0.02169, 0.02649, 0.0274, 0.02831, 0.02849; ...
      0.02641, 0.03076, 0.03172, 0.03263, 0.03216; ...
      0.0374, 0.04159, 0.04217, 0.04237, 0.0426; ...
      0.03941, 0.04321, 0.04378, 0.0441, 0.04426; ...
      0.04181, 0.04551, 0.0464, 0.04657, 0.04673; ...
      0.04475, 0.04837, 0.04887, 0.04903, 0.04947; ...
      0.04803, 0.05195, 0.05279, 0.05265, 0.05295; ...
      0.05225, 0.05591,  0.057, 0.05699, 0.05716; ...
      0.05828, 0.06246, 0.06306, 0.06289, 0.06329; ...
      0.06712, 0.07175, 0.07154, 0.07226, 0.07189; ...
      0.08135, 0.08615, 0.08649, 0.08688, 0.08635; ...
      0.1135, 0.1187, 0.1201, 0.1193, 0.1213 ];
    
    
  case 0.955
    cValM = [...
      0.008147, 0.01783, 0.01928, 0.01943, 0.01918; ...
      0.00912, 0.01863, 0.01997, 0.02006, 0.01993; ...
      0.01053, 0.01972, 0.02106, 0.02126, 0.02091; ...
      0.01299, 0.02169, 0.02286, 0.02302, 0.0227; ...
      0.01812, 0.02629, 0.02724, 0.02734, 0.0273; ...
      0.01918, 0.02726, 0.02815, 0.02832, 0.0281; ...
      0.02033, 0.02816, 0.02923, 0.02917, 0.02921; ...
      0.0218, 0.02917, 0.03028, 0.03013, 0.03065; ...
      0.02358, 0.03093, 0.03196, 0.0318, 0.03213; ...
      0.02577, 0.03224, 0.03353, 0.03363, 0.0337; ...
      0.02851, 0.03529, 0.03635, 0.03642, 0.03623; ...
      0.03325, 0.03942, 0.04021, 0.04058, 0.04023; ...
      0.04048, 0.04678, 0.04699, 0.04713, 0.0472; ...
      0.05723, 0.06321, 0.06476, 0.06391, 0.06347; ...
      0.06028, 0.06716, 0.0667, 0.06778, 0.06642; ...
      0.06476, 0.0699, 0.07121, 0.07024, 0.07005; ...
      0.06926, 0.07424, 0.07468, 0.07511, 0.07351; ...
      0.07592, 0.07913, 0.08176, 0.07984, 0.07908; ...
      0.08195, 0.0868, 0.08865, 0.0878, 0.08686; ...
      0.09119, 0.09639, 0.09799, 0.09769, 0.0967; ...
      0.105, 0.1094, 0.1117, 0.1119, 0.1102; ...
      0.1266, 0.1343, 0.1356, 0.1334, 0.1336; ...
      0.1779, 0.1873, 0.1883, 0.1872, 0.1873 ];
    
    
  case 0.99
    cValM = [...
      0.009695, 0.01982, 0.02109, 0.02116, 0.02075; ...
      0.0109, 0.02062, 0.02189, 0.02162, 0.02175; ...
      0.01265, 0.0224, 0.02386, 0.02345, 0.02299; ...
      0.01589, 0.02537, 0.02601, 0.02595, 0.02512; ...
      0.02213, 0.03099, 0.03187, 0.03103, 0.03165; ...
      0.02311, 0.03164, 0.03264, 0.03195, 0.03256; ...
      0.02431, 0.03286, 0.03382, 0.0335, 0.03365; ...
      0.02536, 0.03413, 0.03526, 0.03487, 0.03478; ...
      0.02822, 0.03627, 0.03819, 0.03695, 0.03688; ...
      0.03121, 0.0385, 0.03933, 0.03907, 0.03921; ...
      0.03415, 0.04192, 0.04274, 0.04253, 0.04237; ...
      0.04013, 0.04655, 0.04729, 0.04745, 0.04754; ...
      0.04983, 0.05572, 0.05629, 0.05598, 0.05555; ...
      0.06813, 0.07838,  0.077, 0.07585, 0.07564; ...
      0.07142, 0.08142, 0.0813, 0.08107, 0.07886; ...
      0.07551, 0.08716, 0.08576, 0.08607, 0.08562; ...
      0.08456, 0.09002, 0.09111, 0.0904, 0.08893; ...
      0.09176, 0.09558, 0.09892, 0.09855, 0.09531; ...
      0.1002, 0.1056, 0.1083, 0.1094, 0.1053; ...
      0.1113, 0.1163, 0.1184, 0.1188, 0.1159; ...
      0.1286, 0.1318, 0.1329, 0.1355, 0.1332; ...
      0.1582, 0.1643, 0.1632, 0.1618, 0.1622; ...
      0.2176, 0.2298, 0.2257, 0.2248, 0.2276 ];
    
    
  case 0.997
    cValM = [...
      0.0107, 0.0211, 0.02213, 0.02192, 0.02184; ...
      0.01236, 0.0222, 0.02344, 0.02273, 0.02299; ...
      0.01425, 0.02402, 0.0252, 0.0251, 0.02478; ...
      0.01742, 0.0278, 0.02832, 0.02777, 0.02678; ...
      0.02525, 0.03358, 0.03509, 0.0341, 0.03365; ...
      0.0256, 0.03453, 0.03609, 0.03548, 0.03503; ...
      0.02728, 0.03594, 0.03783, 0.03726, 0.03704; ...
      0.02859, 0.03825, 0.03881, 0.03756, 0.03897; ...
      0.03201, 0.03993, 0.04137, 0.03994, 0.04115; ...
      0.03442,  0.042, 0.04419, 0.04279, 0.04395; ...
      0.04048, 0.04629, 0.04654, 0.04664, 0.04671; ...
      0.0448, 0.0526, 0.05292, 0.05239, 0.05139; ...
      0.05716, 0.06291, 0.06378, 0.06231, 0.06025; ...
      0.07743, 0.09068, 0.08467, 0.08603, 0.08446; ...
      0.08232, 0.09496, 0.09117, 0.09039, 0.09054; ...
      0.08666, 0.1025, 0.09555, 0.09656, 0.09918; ...
      0.09285, 0.1022, 0.1006, 0.09976, 0.1056; ...
      0.1032, 0.1104, 0.1131, 0.1088, 0.1119; ...
      0.1123, 0.1176, 0.1248, 0.1212, 0.1172; ...
      0.1251, 0.1315,  0.133,  0.133, 0.1298; ...
      0.1433, 0.1537,  0.149,  0.148, 0.1505; ...
      0.1786,  0.182, 0.1803, 0.1838, 0.1809; ...
      0.2465, 0.2487,  0.255, 0.2547, 0.2511 ];
    
    
  case 0.999
    cValM = [...
      0.01184, 0.02222, 0.02303, 0.02228, 0.02289; ...
      0.01376, 0.02295, 0.02439, 0.02398, 0.02384; ...
      0.0158,  0.026, 0.02661, 0.02628, 0.02556; ...
      0.01861, 0.02993, 0.02908, 0.02937, 0.02794; ...
      0.02661, 0.03611, 0.0369, 0.03628, 0.03556; ...
      0.02833, 0.0367, 0.03817, 0.03828, 0.03804; ...
      0.02853, 0.03773, 0.03934, 0.03877, 0.03985; ...
      0.03105, 0.04097, 0.04148, 0.04019, 0.04339; ...
      0.0341, 0.0422, 0.0436, 0.04127, 0.04493; ...
      0.03707, 0.0447, 0.04688, 0.04503, 0.04677; ...
      0.04285, 0.04982, 0.05098, 0.05075, 0.04922; ...
      0.05316, 0.05677, 0.0591, 0.05591, 0.05391; ...
      0.06087, 0.06832,  0.067, 0.06684, 0.06378; ...
      0.08939, 0.09833, 0.09004, 0.09417, 0.09062; ...
      0.09195, 0.1042, 0.09909, 0.09661,  0.101; ...
      0.09383, 0.1088, 0.1101, 0.1057, 0.1063; ...
      0.09889, 0.1177, 0.1139, 0.1068, 0.1143; ...
      0.1136, 0.1218, 0.1203, 0.1181, 0.1215; ...
      0.1224, 0.1327, 0.1294, 0.1282, 0.1262; ...
      0.1403, 0.1444, 0.1496, 0.1511,  0.143; ...
      0.1568, 0.1667, 0.1612, 0.1654, 0.1584; ...
      0.1988, 0.1989, 0.1903, 0.1926,  0.196; ...
      0.2689, 0.2616, 0.2759, 0.2697,  0.273 ];
    
  otherwise
    error('Allowed confidence leveles are: 0.5, 0.683, 0.955, 0.99, 0.997, 0.999.');
    
    
end

end

function [cValD,Nsamp,navs] = getCValDatProb(opt)

% critical values for the combination experiment vs experiment
% rows correspond to the number of samples 
Nsamp = [...
  50000 40000 30000 20000 10000, 9000, 8000,...
  7000, 6000, 5000, 4000, 3000, 2000, 1000, ...
  900, 800, 700, 600, 500, 400, 300, 200, 100];
%
% coulms correspond to the number of averages
navs = [0 4 8 16 32];
%
% there is a matrix for each probability in the range
% probs = [0.5, 0.683, 0.955, 0.99, 0.997, 0.999];

switch opt
  case 0.5
    cValD = [...
      0.006355, 0.00651, 0.006519, 0.006547, 0.006486; ...
      0.007054, 0.007327, 0.007328, 0.007291, 0.007277; ...
      0.008104, 0.0084, 0.00847, 0.008406, 0.008301; ...
      0.009978, 0.01035, 0.01028, 0.01036, 0.0102; ...
      0.01412, 0.01458, 0.01431, 0.01464, 0.01431; ...
      0.01479, 0.01534, 0.01511, 0.01525, 0.01512; ...
      0.01563, 0.01622, 0.01609, 0.01617, 0.01616; ...
      0.01673, 0.01715, 0.01731, 0.0174, 0.01729; ...
      0.01808, 0.01852, 0.01868, 0.01854, 0.01854; ...
      0.01982, 0.02042, 0.02042, 0.02029, 0.02018; ...
      0.0222, 0.02292, 0.02288, 0.02276, 0.02266; ...
      0.02536, 0.02634, 0.02604, 0.02608, 0.02597; ...
      0.03101, 0.03204, 0.03172, 0.03203, 0.0317; ...
      0.04284,  0.045, 0.0451, 0.04504, 0.04475; ...
      0.04569, 0.04703, 0.04717, 0.04751, 0.04694; ...
      0.0484, 0.05009, 0.05012, 0.05085, 0.05012; ...
      0.05172, 0.05324, 0.05328, 0.05397, 0.0531; ...
      0.0556, 0.05726, 0.05787, 0.05824, 0.05729; ...
      0.06105, 0.06303, 0.06296, 0.0633,  0.063; ...
      0.06773, 0.07004, 0.0704, 0.07018, 0.07048; ...
      0.07752, 0.08005, 0.08034, 0.08076, 0.08017; ...
      0.0938, 0.09699, 0.09827, 0.09722, 0.09679; ...
      0.1307, 0.1332, 0.1336, 0.1347, 0.1344 ];
    
  case 0.683
    cValD = [...
      0.007624, 0.007841, 0.007805, 0.007809, 0.007781; ...
      0.008502, 0.008757, 0.008841, 0.008712, 0.008678; ...
      0.009703, 0.01009, 0.01016, 0.01001, 0.009958; ...
      0.012, 0.01237, 0.01233, 0.01242, 0.01209; ...
      0.01699, 0.0175, 0.0174, 0.01741, 0.01735; ...
      0.0178, 0.01835, 0.01827, 0.01828, 0.01841; ...
      0.01863, 0.01941, 0.01934, 0.01944, 0.0195; ...
      0.02, 0.02078, 0.02064, 0.02093, 0.02071; ...
      0.02167, 0.0224, 0.02246, 0.02237, 0.02253; ...
      0.02372, 0.02442, 0.0244, 0.02442, 0.02446; ...
      0.02642, 0.02732, 0.02725, 0.02739, 0.02715; ...
      0.03037, 0.0317, 0.03123, 0.03144, 0.03125; ...
      0.03722, 0.03837, 0.03836, 0.03841, 0.0383; ...
      0.05164, 0.05395, 0.05413, 0.05451, 0.05423; ...
      0.05474, 0.05695, 0.05694, 0.05781, 0.05652; ...
      0.058, 0.05995, 0.06063, 0.06097, 0.06013; ...
      0.06245, 0.0639, 0.06421, 0.06462, 0.0638; ...
      0.06743, 0.06915, 0.07006, 0.06947, 0.06938; ...
      0.07268, 0.07561, 0.07619, 0.07629, 0.0764; ...
      0.08178, 0.08378, 0.08447, 0.08366, 0.08515; ...
      0.09347, 0.0966, 0.09708, 0.09714, 0.09706; ...
      0.1132, 0.1167, 0.1187, 0.1178, 0.1168; ...
      0.158, 0.1623, 0.1629, 0.1622, 0.1637 ];
    
  case 0.955
    cValD = [...
      0.01182, 0.01216, 0.01211, 0.01205, 0.01179; ...
      0.01331, 0.01373, 0.01363, 0.0134, 0.0133; ...
      0.015, 0.01551, 0.01589, 0.01547, 0.01549; ...
      0.01861, 0.0191, 0.0191, 0.01901, 0.01871; ...
      0.0263, 0.02674, 0.02674, 0.02664, 0.02718; ...
      0.02738, 0.02817, 0.02847, 0.02817, 0.02796; ...
      0.02892, 0.02989, 0.02995, 0.02965, 0.02985; ...
      0.03136, 0.03173, 0.03201, 0.03141, 0.03176; ...
      0.0342, 0.03503, 0.03386, 0.0342, 0.03399; ...
      0.03735, 0.03784, 0.03706, 0.03773, 0.03741; ...
      0.04123, 0.04221, 0.0418, 0.04151, 0.04172; ...
      0.04784, 0.04843, 0.04816, 0.04673, 0.04805; ...
      0.05751, 0.05948, 0.05889, 0.05854, 0.0582; ...
      0.08107, 0.08311, 0.08359, 0.0832, 0.08256; ...
      0.08464, 0.08762, 0.08791, 0.08789, 0.08728; ...
      0.08896, 0.09205, 0.09407, 0.09265, 0.09264; ...
      0.09693, 0.09882,    0.1, 0.09928, 0.09864; ...
      0.1047, 0.1068, 0.1084, 0.1084, 0.1068; ...
      0.114,  0.117, 0.1169, 0.1164,  0.118; ...
      0.1276, 0.1311, 0.1321, 0.1318, 0.1294; ...
      0.1469, 0.1503, 0.1502, 0.1505, 0.1501; ...
      0.1789, 0.1851,  0.184, 0.1813, 0.1819; ...
      0.2493, 0.2551, 0.2561, 0.2582,  0.254 ];
    
  case 0.99
    cValD = [...
      0.01446, 0.01472, 0.01461, 0.01462, 0.01414; ...
      0.01613, 0.01654, 0.01636, 0.01614, 0.01619; ...
      0.01824, 0.01881, 0.01923, 0.01887, 0.01886; ...
      0.0222, 0.02263, 0.0233, 0.02316, 0.02236; ...
      0.03181, 0.03199, 0.03199, 0.03202, 0.03224; ...
      0.03335, 0.03357, 0.03371, 0.03398, 0.03468; ...
      0.03513, 0.03582, 0.03615, 0.03588, 0.03617; ...
      0.03775, 0.03819, 0.03816, 0.03842,  0.039; ...
      0.04077, 0.04172, 0.04076, 0.0416, 0.04197; ...
      0.04556, 0.04584, 0.04515, 0.0449, 0.04543; ...
      0.05033, 0.04979, 0.05076, 0.04944, 0.05056; ...
      0.05708, 0.05949, 0.05841, 0.05668, 0.05715; ...
      0.07024, 0.07102, 0.07057, 0.06986, 0.06951; ...
      0.09704, 0.1012, 0.1003, 0.1003, 0.09858; ...
      0.1029, 0.1057, 0.1047, 0.1056, 0.1041; ...
      0.1095, 0.1135, 0.1132, 0.1096, 0.1106; ...
      0.1172, 0.1191, 0.1215, 0.1174, 0.1173; ...
      0.1276, 0.1303, 0.1316, 0.1279,  0.125; ...
      0.1373, 0.1442, 0.1421, 0.1425, 0.1403; ...
      0.1571, 0.1628, 0.1602, 0.1603, 0.1545; ...
      0.1779, 0.1865, 0.1805, 0.1837,  0.177; ...
      0.219, 0.2265, 0.2235, 0.2217, 0.2167; ...
      0.2965, 0.3102, 0.3125, 0.3134, 0.3065 ];
    
  case 0.997
    cValD = [...
      0.01636, 0.01667, 0.0165, 0.01653, 0.01615; ...
      0.01771, 0.01863, 0.01818, 0.0179, 0.01802; ...
      0.02028, 0.02119, 0.02144, 0.02051, 0.02124; ...
      0.02504, 0.02573, 0.02688, 0.0257, 0.02495; ...
      0.03552, 0.03474, 0.03591, 0.03675, 0.03557; ...
      0.03724, 0.0369, 0.03889, 0.03903, 0.03791; ...
      0.03885, 0.03918, 0.0403, 0.04053, 0.04057; ...
      0.04217, 0.04271, 0.04303, 0.04223, 0.04358; ...
      0.04641, 0.04637, 0.0454, 0.04529, 0.04683; ...
      0.05048, 0.05041, 0.05087, 0.04923, 0.05018; ...
      0.05625, 0.05477, 0.05806, 0.05645, 0.05628; ...
      0.06571, 0.06575, 0.06536, 0.06262, 0.06354; ...
      0.08023, 0.07965, 0.0805, 0.07621, 0.07614; ...
      0.1071, 0.1161, 0.1122, 0.1091, 0.1043; ...
      0.1149, 0.1206,  0.117, 0.1146, 0.1124; ...
      0.1221, 0.1261, 0.1276, 0.1232,   0.12; ...
      0.133, 0.1349, 0.1356, 0.1296, 0.1288; ...
      0.1448,  0.142, 0.1436, 0.1402, 0.1356; ...
      0.1557, 0.1595, 0.1603, 0.1604, 0.1527; ...
      0.1743, 0.1834, 0.1788, 0.1801, 0.1749; ...
      0.1977, 0.2136,  0.208, 0.2015, 0.1948; ...
      0.2467, 0.2506, 0.2625, 0.2423, 0.2506; ...
      0.3355,  0.344, 0.3701, 0.3619, 0.3505 ];
    
  case 0.999
    cValD = [...
      0.01727, 0.01845, 0.01779, 0.01741, 0.0178; ...
      0.02128, 0.01969, 0.01943, 0.01939, 0.01984; ...
      0.02281, 0.02257, 0.0251, 0.0219, 0.02261; ...
      0.02644, 0.02907, 0.03022, 0.02772, 0.02633; ...
      0.03833, 0.0371, 0.03951, 0.04025, 0.03904; ...
      0.04009, 0.03907, 0.04237, 0.04256, 0.04118; ...
      0.04152, 0.04293, 0.04517, 0.04427, 0.04438; ...
      0.04626, 0.04558, 0.04809, 0.04678, 0.04688; ...
      0.05049, 0.05105, 0.05188, 0.05202, 0.05179; ...
      0.05407, 0.0553, 0.05383, 0.05596, 0.05402; ...
      0.05972, 0.06377, 0.06153, 0.06312, 0.06023; ...
      0.07435, 0.07309, 0.0727, 0.06647, 0.07134; ...
      0.08562, 0.08465, 0.08832, 0.07972, 0.07952; ...
      0.114, 0.1295, 0.1203, 0.1158, 0.1114; ...
      0.1226, 0.1342, 0.1332, 0.1206, 0.1209; ...
      0.1303, 0.1405, 0.1361, 0.1318, 0.1313; ...
      0.1416, 0.1504, 0.1463, 0.1394, 0.1373; ...
      0.1541, 0.1674, 0.1593, 0.1478, 0.1552; ...
      0.1664, 0.1748, 0.1749, 0.1693, 0.1625; ...
      0.1889, 0.1934, 0.1869, 0.1956, 0.1838; ...
      0.2077, 0.2247, 0.2207, 0.2208, 0.2157; ...
      0.2603, 0.2627, 0.2913, 0.2669, 0.2706; ...
      0.3621, 0.3767, 0.4172,  0.394, 0.3772 ];
    
  otherwise
    error('Allowed confidence leveles are: 0.5, 0.683, 0.955, 0.99, 0.997, 0.999.');


end

end
