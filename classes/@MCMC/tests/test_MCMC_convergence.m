%
% Tests that the chains are converging and
% mixing in a desirable way.
%
% Using a simple harmonic oscillator model
%
function test_MCMC_convergence(~)
  
  result      = true;
  message     = 'Pass';
  
  pl = plist(...
    'Nsamples',  1200,...
    'FitParams', {'DAMP','K'},...
    'range',     {[-3 3] [-3 3]},...
    'f1',        1e-4,...
    'f2',        0.5,...
    'inNames',   {'COMMAND.force'},...
    'outNames',  {'HARMONIC_OSC_1D.position'},...
    'Navs',      5,...
    'cov',       [1.74203263643076e-07 -2.02332484875624e-22 ; -2.02332484875624e-22 1.66273793345002e-08],...
    'search',    true,...
    'Tc',        [1 2],...
    'heat',      2,...
    'Fprint',    1500,...
    'jumps',     [2e0 1e1 5e2 1e3],...
    'x0',        [0.1 0.1],...
    'simplex',   false,...
    'debug',             false,...
    'print diagnostics', false);
  
  m = MCMC(pl);
  
  % Do a run
  m.setModel(ssm('harmonic_osc.mat'));
  m.setInputs(ao('in.mat'));
  m.setNoise(ao('noise.mat'));
  
  try
    p    = m.process(ao('out.mat'));
    psre = find(p.procinfo,'PSRE');
    h    = find(p.procinfo,'Yu-Mykland');
  catch err
    result  = false;
    message = sprintf(['Failed to run algorithm.process... ' ...
               'Error: %s'], err.message);
  end
  
  if result
    try 
      if psre.R > 1.2 || h < 0.75
        result  = false;
        message = ['Failed to reach convergence, or the chains ' ...
                   'are not mixing correctly!' ];
      end
    catch err
      result  = false;
      message = sprintf(['Failed to run diagnostics on chains. ' ...
                 'Error: %s'], err.message);
    end
  end
  
  assert(result, message)

end