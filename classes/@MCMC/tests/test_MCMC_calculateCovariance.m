%
% Tests for the calculation of the covariance matrix
%
% Using a simple harmonic oscillator model
%
function test_MCMC_calculateCovariance(~)
  
  result      = true;
  message     = 'Pass';
  
  pl = plist(...
    'Nsamples',  10,...
    'FitParams', {'DAMP','K'},...
    'range',     {[-3 3] [-3 3]},...
    'f1',        1e-4,...
    'f2',        0.5,...
    'inNames',   {'COMMAND.force'},...
    'outNames',  {'HARMONIC_OSC_1D.position'},...
    'Navs',      5,...
    'search',    true,...
    'diffstep',  [1e-3 1e-3],...
    'Tc',        [1 2],...
    'jumps',     [2e0 1e1 5e2 1e3],...
    'x0',        [0.1 0.1],...
    'simplex',   false,...
    'debug',     false,...
    'print diagnostics', false);
  
  m = MCMC(pl);
  
  m.setModel(ssm('harmonic_osc.mat'));
  m.setInputs(ao('in.mat'));
  m.setNoise(ao('noise.mat'));
  
  % Preprocess the data
  try
    m.buildLogLikelihood(ao('out.mat'));  
  catch err
    result  = false;
    message = sprintf(['Failed to build the loglikelihood function... ' ...
               'Error: %s'], err.message);
  end
  
  if result
    try
      m.performDataChecks();
    catch err
      result  = false;
      message = sprintf(['Failed sanity checks... ' ...
                 'Error: %s'], err.message);
    end
  end
  
  if result
    try
      m.calculateCovariance();
    catch err
      result  = false;
      message = sprintf(['Failed to estimate the covariance matrix... ' ...
                 'Error: %s'], err.message);
    end
  end
  
  if result
    try
      cov = m.covariance;
      chol(cov.y);
    catch err
      result  = false;
      message = sprintf(['The covariance matrix is not positive definite... ' ...
                 'Error: %s'], err.message);
    end
  end
  
  if result
    
      pl = plist(...
      'Nsamples',  10,...
      'FitParams', {'DAMP','K'},...
      'range',     {[-3 3] [-3 3]},...
      'f1',        1e-4,...
      'f2',        0.5,...
      'inNames',   {'COMMAND.force'},...
      'outNames',  {'HARMONIC_OSC_1D.position'},...
      'Navs',      5,...
      'search',    true,...
      'stepranges',[1e-8 1e-8 ; 0.5 0.5],...
      'ngrid',     5,...
      'Tc',        [1 2],...
      'jumps',     [2e0 1e1 5e2 1e3],...
      'x0',        [0.1 0.1],...
      'simplex',   false,...
      'debug',     false);

    m = MCMC(pl);

    m.setModel(ssm('harmonic_osc.mat'));
    m.setInputs(ao('in.mat'));
    m.setNoise(ao('noise.mat'));
    
    try
      m.buildLogLikelihood(ao('out.mat'));
      m.calculateCovariance();
    catch err
      result  = false;
      message = sprintf(['Failed to estimate the covariance matrix and the ' ... 
                 'differentiation steps. Error: %s'], err.message);
    end
    
  end
  
  assert(result, message)

end